export : define [nameFont para metrics font] : begin
	set font.name {}

	set para.family [para.family.trim]
	set para.style : [para.style.trim] || "Regular"
	define [nameFont nameid str] : begin
		font.name.push : object # Mac Roman
			platformID 1
			encodingID 0
			languageID 0
			nameID nameid
			nameString str
		font.name.push : object # Windows Unicode English
			platformID 3
			encodingID 1
			languageID 1033
			nameID nameid
			nameString str

	nameFont 16 para.family # Preferred Family
	nameFont 17 para.style  # Preferred Style
	nameFont 21 para.family # WWS Preferred Family
	nameFont 22 para.style  # WWS Preferred Style

	set font.name.preferredFamily     para.family
	set font.name.preferredSubFamily  para.style
	if (para.style == 'Regular' || para.style == 'Bold' || para.style == 'Italic' || para.style == "Bold Italic") : then
		nameFont 1 para.family # Family
		nameFont 2 para.style  # Style
	: else
		nameFont 1 : para.family + ' ' + [para.style.replace [regex ' Italic$'] '']
		nameFont 2 : if [[regex ' Italic$'].test para.style] 'Italic' 'Regular'
	nameFont 3 "\(para.family) \(para.style) \(para.version) (\(para.codename))" # Unique Name
	nameFont 5 para.version # Version
	local fontfullName : if (para.style != 'Regular') (para.family + ' ' + para.style) para.family
	nameFont 4 fontfullName # Full Name
	nameFont 6 : fontfullName.replace [regex ' ' 'g'] '-' # Postscript
	
	nameFont 0 para.copyright # Copyright
	# nameFont 7 para.trademark # Trademark
	nameFont 8 para.manufacturer # Manufacturer
	nameFont 9 para.designer # Designer
	nameFont 10 para.description # Description
	nameFont 13 para.licence  # License

	set font.name : font.name.sort : lambda [a b] : begin
		if (a.platformID != b.platformID) : return : a.platformID - b.platformID
		if (a.encodingID != b.encodingID) : return : a.encodingID - b.encodingID
		if (a.languageID != b.languageID) : return : a.languageID - b.languageID
		return : a.nameID - b.nameID

	# Weight, width and slantness
	set font.OS_2.usWeightClass     para.weight
	set font.OS_2.panose.3          9 # Monospaced
	set font.OS_2.panose.2          : 1 + para.weight / 100
	set font.OS_2.fsSelection       : object
		oblique        : not : not para.isOblique
		bold           : not : not para.isBold
		italic         : not : not (para.isItalic || para.isOblique)
		regular        : not : not ([not para.isBold] && [not para.isItalic] && [not para.isOblique])
		useTypoMetrics true
	set font.OS_2.sFamilyClass      : 8 * 0x100 + 9
	set font.post.isFixedPitch      true
	set font.head.macStyle          : object
		bold          : not : not para.isBold
		italic        : not : not (para.isItalic || para.isOblique)