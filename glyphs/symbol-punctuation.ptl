### Extended symbols
# spaces
# we set the width of emquad to 1000mem (1em) and the width of emspace to WIDTH (0.5em)
symbol-block 'Spaces'
	alias 'enquad' 0x2000 'space'
	alias 'emquad' 0x2001 'space'
	alias 'ensp' 0x2002 'space'
	alias 'emsp' 0x2003 'space'
	alias 'threePerEmsp' 0x2004 'space'
	alias 'fourPerEmsp' 0x2005 'space'
	alias 'sixPerEmsp' 0x2006 'space'
	alias 'fgsp' 0x2007 'space'
	create-glyph 'zwsp' : glyph-construction
		assign-unicode 0x200B; set-width 0
	create-glyph 'nbsp' : glyph-construction
		assign-unicode 0xA0
		include glyphs.space

symbol-block 'Brackets'
	local parenOutside 0.15
	local parenInside  0.65
	local bracketOutside 0.15
	local bracketInside 0.9
	local braceOutside  0.1
	local braceInside   0.9
	
	create-glyph 'parenLeft' : glyph-construction
		set-width WIDTH
		assign-unicode '('
		
		local p 0.6
		include : dispiro
			widths.lhs
			g4 [mix SB RIGHTSB parenInside] parenTop
			quadcontrols 1 (1 - p)
			g4 [mix SB RIGHTSB parenOutside] parenMid
			quadcontrols 0 p
			g4 [mix SB RIGHTSB parenInside] parenBot
	
	create-glyph 'parenRight' : glyph-construction
		set-width WIDTH
		assign-unicode ')'
		
		include glyphs.parenLeft
		include : FlipAround MIDDLE parenMid
	
	
	create-glyph 'bracketLeft' : glyph-construction
		set-width WIDTH
		assign-unicode '['
	
		include : HBarBottom [mix SB RIGHTSB bracketOutside] [mix SB RIGHTSB bracketInside] parenBot
		include : HBarTop    [mix SB RIGHTSB bracketOutside] [mix SB RIGHTSB bracketInside] parenTop
		include : VBarLeft   [mix SB RIGHTSB bracketOutside] parenBot parenTop
	
	create-glyph 'bracketRight' : glyph-construction
		set-width WIDTH
		assign-unicode ']'
		
		include glyphs.bracketLeft
		include : FlipAround MIDDLE parenMid
	
	
	create-glyph 'braceLeft' : glyph-construction
		set-width WIDTH
		assign-unicode '{'
		
		local parenCenter [mix SB RIGHTSB [mix braceInside braceOutside 0.5]]
		local radius    : [mix SB RIGHTSB braceInside] - parenCenter
	
		include : dispiro
			flat [mix SB RIGHTSB braceInside] (parenTop - HALFSTROKE) [widths.heading HALFSTROKE HALFSTROKE LEFTWARD]
			curl ([mix SB RIGHTSB braceInside] - 0.01) (parenTop - HALFSTROKE) [widths.heading HALFSTROKE HALFSTROKE LEFTWARD]
			archv
			flat parenCenter (parenTop - radius) [heading DOWNWARD]
			curl parenCenter (parenMid + radius) [heading DOWNWARD]
			arcvh
			flat ([mix SB RIGHTSB braceOutside] + 0.01) parenMid [heading LEFTWARD]
			curl [mix SB RIGHTSB braceOutside] parenMid [heading LEFTWARD]
		
		include : dispiro
			flat [mix SB RIGHTSB braceInside] (parenBot + HALFSTROKE) [widths.heading HALFSTROKE HALFSTROKE LEFTWARD]
			curl ([mix SB RIGHTSB braceInside] - 0.01) (parenBot + HALFSTROKE) [widths.heading HALFSTROKE HALFSTROKE LEFTWARD]
			archv
			flat parenCenter (parenBot + radius) [heading UPWARD]
			curl parenCenter (parenMid - radius) [heading UPWARD]
			arcvh
			flat ([mix SB RIGHTSB braceOutside] + 0.01) parenMid [heading LEFTWARD]
			curl [mix SB RIGHTSB braceOutside] parenMid [heading LEFTWARD]

	create-glyph 'braceRight' : glyph-construction
		set-width WIDTH
		assign-unicode '}'
		
		include glyphs.braceLeft
		include : FlipAround MIDDLE parenMid
	
	create-glyph 'angleLeft' : glyph-construction
		assign-unicode 0x2329
		local fatten : Math.hypot 1 (([mix SB RIGHTSB : parenInside - parenOutside] - O) / (parenTop - parenMid))
		include : dispiro
			widths.lhs OPERATORSTROKE
			flat [mix SB RIGHTSB parenInside] parenTop
			curl ([mix SB RIGHTSB parenOutside] + O) parenMid [widths.heading (OPERATORSTROKE * fatten) 0 DOWNWARD]
		include : dispiro
			widths.rhs OPERATORSTROKE
			flat [mix SB RIGHTSB parenInside] parenBot
			curl ([mix SB RIGHTSB parenOutside] + O) parenMid [widths.heading 0 (OPERATORSTROKE * fatten) UPWARD]
	alias 'mangleLeft' 0x27E8 'angleLeft'
	
	turned 'angleRight' 0x232A 'angleLeft' MIDDLE parenMid
	alias 'mangleRight' 0x27E9 'angleRight'
	
	dual 'dblangleLeft' 0x27EA 'angleLeft' (WIDTH * 0.35)
	dual 'dblangleRight' 0x27EB 'angleRight' (WIDTH * 0.35)
	
	create-glyph 'ceilingLeft' : glyph-construction
		assign-unicode 0x2308
		include : HBarTop    [mix SB RIGHTSB bracketOutside] [mix SB RIGHTSB bracketInside] parenTop
		include : VBarLeft   [mix SB RIGHTSB bracketOutside] parenBot parenTop
	create-glyph 'floorLeft' : glyph-construction
		assign-unicode 0x230A
		include : HBarBottom [mix SB RIGHTSB bracketOutside] [mix SB RIGHTSB bracketInside] parenBot
		include : VBarLeft   [mix SB RIGHTSB bracketOutside] parenBot parenTop
	turned 'floorRight' 0x230B 'ceilingLeft' MIDDLE parenMid
	turned 'ceilingRight' 0x2309 'floorLeft' MIDDLE parenMid

symbol-block 'Small Punctuations'
	create-glyph 'period' : glyph-construction
		set-width WIDTH
		assign-unicode '.'
		include : Ring (PERIODSIZE - O) O (MIDDLE - PERIODRADIUS + O) (MIDDLE + PERIODRADIUS - O) true
	
	
	create-glyph 'xhdot' : glyph-construction
		set-width WIDTH
		include : Ring (XH - O) (XH - PERIODSIZE + O) (MIDDLE - PERIODRADIUS + O) (MIDDLE + PERIODRADIUS - O) true
	
	
	create-glyph 'comma' : glyph-construction
		set-width WIDTH
		assign-unicode ','
		include glyphs.period
		
		local sw : Math.min STROKE (PERIODSIZE * 0.5)
		include : dispiro
			widths.rhs sw
			g4 (MIDDLE + PERIODRADIUS - O) [mix O (PERIODSIZE - O) 0.5]
			g4 (MIDDLE + PERIODRADIUS - O + 0.1 * TANSLANT) ([mix O (PERIODSIZE - O) 0.5] - 0.1)
			quadcontrols (0.9 * TANSLANT * DESCENDER / (1.7 * PERIODRADIUS - O)) 0.5 12
			g4 [mix MIDDLE (MIDDLE - PERIODRADIUS) 0.3] DESCENDER
	
	create-glyph 'invertComma' : glyph-construction
		set-width WIDTH
		include glyphs.period
		
		local sw : Math.min STROKE (PERIODSIZE * 0.5)
		include : dispiro
			widths.lhs sw
			g4 (MIDDLE - PERIODRADIUS + O) [mix O (PERIODSIZE - O) 0.5]
			g4 (MIDDLE - PERIODRADIUS + O + 0.1 * TANSLANT) ([mix O (PERIODSIZE - O) 0.5] - 0.1)
			quadcontrols (-0.3 * TANSLANT * DESCENDER / ((1.3 + TANSLANT * 2) * PERIODRADIUS - O)) 0.5 12
			g4 [mix MIDDLE (MIDDLE + PERIODRADIUS) (0.3 + TANSLANT * 2)] DESCENDER
	
	create-glyph 'colon' : glyph-construction
		set-width WIDTH
		assign-unicode ':'
		include glyphs.period
		include glyphs.xhdot
	
	create-glyph 'semicolon' : glyph-construction
		set-width WIDTH
		assign-unicode ';'
		include glyphs.comma
		include glyphs.xhdot
	alias 'greeksemicolon' 0x37E 'semicolon'

symbol-block 'Emotion Punctuations'
	local questionBottom : Math.max (CAP * 0.3) (DOTSIZE * 1.5)
	create-glyph 'question' : glyph-construction
		set-width WIDTH
		assign-unicode '?'
		include : Ring (DOTSIZE - O) O (MIDDLE - DOTRADIUS + O) (MIDDLE + DOTRADIUS - O) true
		include : dispiro
			widths.rhs
			g4 SB (CAP - HOOK)
			hookstart CAPO
			g4 RIGHTSB (CAP - SMOOTHB * 0.9)
			alsothru 0.5 0.45 [widths.center ESSQUESTION]
			straight.down.end (MIDDLE - HALFSTROKE * HVCONTRAST) questionBottom [widths STROKE 0]
	create-glyph 'dwquestion' : glyph-construction
		set-width UPM
		assign-unicode 0xFF1F
		include : Ring (DOTSIZE - O) O (UPM / 2 - DOTRADIUS + O) (UPM / 2 + DOTRADIUS - O) true
		include : dispiro
			widths.rhs
			g4 (UPM * 0.25) (CAP - HOOK)
			hookstart CAPO
			g4 (UPM * 0.75) (CAP - SMOOTHB * 0.9)
			alsothru 0.5 0.45 [widths.center ESSQUESTION]
			straight.down.end (UPM / 2 - HALFSTROKE * HVCONTRAST) questionBottom [widths STROKE 0]
	
	create-glyph 'questionDown' : glyph-construction
		assign-unicode 0xBF
		set-width WIDTH
		include glyphs.question
		include : FlipAround MIDDLE (XH / 2)

	create-glyph 'exclam' : glyph-construction
		set-width WIDTH
		include capitalMarks
		assign-unicode '!'
		include : VBar MIDDLE questionBottom CAP
		include : Ring (DOTSIZE - O) O (MIDDLE - DOTRADIUS + O) (MIDDLE + DOTRADIUS - O) true

	create-glyph 'exclamDown' : glyph-construction
		assign-unicode 0xA1
		set-width WIDTH
		include glyphs.exclam
		include : FlipAround MIDDLE (XH / 2)

	create-glyph 'doubleexclam' : glyph-construction
		assign-unicode 0x203C
		local d : 0.25 * WIDTH
		include glyphs.exclam
		apply-transform : Translate (-d * 2) 0
		include glyphs.exclam
		apply-transform : Translate d 0

	
	create-glyph 'bar' : glyph-construction
		set-width WIDTH
		set this.anchors.above {.type BASE .x MIDDLE .y parenTop}
		set this.anchors.below {.type BASE .x MIDDLE .y parenBot}
		assign-unicode '|'
		include : VBar MIDDLE parenBot parenTop
	create-glyph 'brokenbar' : glyph-construction
		assign-unicode 0xA6
		local breakDist : Math.max STROKE (CAP / 8)
		include : VBar MIDDLE (parenMid + breakDist / 2) parenTop
		include : VBar MIDDLE parenBot (parenMid - breakDist / 2)

	# Click symbols
	alias 'dentalclick' 0x1C0 'bar'
	dual 'alveolarlateralclick' 0x1C1 'bar' (WIDTH * 0.35)
	alias 'alveolarclick' 0x1C3 'exclam'
	create-glyph 'palatoalveolarclick' : glyph-construction
		assign-unicode 0x1C2
		include glyphs.bar AS_BASE
		include : HBarBottom SB RIGHTSB (parenMid + XH * 0.1) OPERATORSTROKE
		include : HBarTop SB RIGHTSB (parenMid - XH * 0.1) OPERATORSTROKE

symbol-block 'Typographic Symbols'
	create-glyph 'ampersand' : glyph-construction
		set-width WIDTH
		assign-unicode '&'
		
		local fine : adviceBlackness 3
		local p 0.875
		local l 0.05
		local pr 0.85
		local rr 0.95
		local q 0.45
		local r 1.1
		local s 0
		
		include : dispiro
			widths.lhs
			flat (RIGHTSB - O - STROKE * HVCONTRAST) CAPMIDDLE [heading DOWNWARD]
			curl (RIGHTSB - O - STROKE * HVCONTRAST) (SMOOTHA + HVCONTRAST * TANSLANT * STROKE)
			arcvh
			g4   MIDDLE (O + fine) [widths fine 0]
			archv
			g4   (SB + O + fine * HVCONTRAST) (SMOOTHB - HVCONTRAST * TANSLANT * STROKE)
			alsothru 0.5 0.5 [widths.center (fine * ESS / STROKE)]
			g4   ([mix SB RIGHTSB p] - fine * HVCONTRAST) (CAP - SMOOTHB * pr * rr + HVCONTRAST * TANSLANT * STROKE * (fine / STROKE)) [widths 0 fine]
			arcvh
			g4   ([mix SB RIGHTSB [mix p l 0.5]] - CORRECTION_OMIDS + TANSLANT * STROKE) (CAPO - fine)
			archv
			g4   ([mix SB RIGHTSB l] + fine * HVCONTRAST) (CAP - SMOOTHA * pr - HVCONTRAST * TANSLANT * STROKE * (fine / STROKE))
			alsothru 0.5 0.45 [lambda]
			flat [mix SB RIGHTSB r] (SMOOTHA * s)
			curl [mix SB RIGHTSB r] ((SMOOTHA * s) - 1)
	
	
	create-glyph 'at' : glyph-construction
		set-width WIDTH
		assign-unicode '@'
		
		local top parenTop
		local bot parenBot
		local otop : mix bot top 0.75
		local obot : mix top bot 0.8
	
		local sw : adviceBlackness 3.5
		local m1 : [mix (SB + sw) (RIGHTSB - sw) 0.47] - sw / 2
		local m2 : [mix m1 RIGHTSB 0.52] + TANSLANT * sw
		
		local sma : SMOOTHA * ((RIGHTSB - m1) / (RIGHTSB - SB) * 1.1)
		local smb : SMOOTHB * ((RIGHTSB - m1) / (RIGHTSB - SB) * 1.1)
		
		include : dispiro
			widths.lhs sw
			flat RIGHTSB (otop - O) [heading LEFTWARD]
			curl m2 (otop - O)
			archv
			flat m1 (otop - sma)
			curl m1 (obot + smb)
			arcvh
			g4   m2 (obot + O)
			archv
			flat RIGHTSB (obot + sma)
			curl RIGHTSB (top - SMOOTHB)
			arcvh
			g4   (MIDDLE - CORRECTION_OMIDS) (top - O) [widths STROKE 0]
			archv
			flat SB (top - SMOOTHA) [widths sw 0]
			curl SB (bot + SMOOTHB)
			arcvh
			flat (MIDDLE + CORRECTION_OMIDS) (bot + O) [widths STROKE 0 ]
			curl (RIGHTSB - HALFSTROKE + TANSLANT * sw) (bot + O)
	create-glyph 'paragraph' : glyph-construction
		set-width WIDTH
		assign-unicode 0xB6
		local sw : adviceBlackness 3.6
		
		include : VBar (MIDDLE + sw / 4) 0 CAP sw
		include : VBar (RIGHTSB - sw / 2) 0 CAP sw
		include : dispiro
			widths.center sw
			straight.left.start (MIDDLE - sw / 4) (CAP - sw / 2) [heading LEFTWARD]
			archv
			g4.down.mid (SB + sw / 2) [mix (CAP * 0.5) (CAP - sw / 2) 0.5] [heading DOWNWARD]
			arcvh
			straight.right.end (MIDDLE - sw / 4) (CAP * 0.5) [heading RIGHTWARD]
	
	create-glyph 'section' : glyph-construction
		assign-unicode 0xA7
		
		local top parenTop
		local bot parenBot
		local sma SMOOTHA
		
		local s : dispiro
			widths.lhs
			g4 RIGHTSB (top - HOOK)
			hookstart top
			g4 SB (top - sma)
			alsothru 0.5 0.5 [widths HALFSTROKE HALFSTROKE]
			g4 RIGHTSB [mix bot top 0.501] [widths 0 STROKE]
			g4 RIGHTSB [mix bot top 0.5] [widths 0 STROKE]
			g4 [mix SB RIGHTSB 0.6] [mix bot top : [linreg 18 0.325 108 0.3 STROKE] * (1 - TANSLANT * 0.1)]
		
		include s
		include : FlipAround MIDDLE parenMid
		include s
	
	local asteriskCenterY : parenTop - LONGJUT * 1.5
	create-glyph 'asterisk.top' : glyph-construction
		set-width WIDTH
		assign-unicode '*'
		
		local radius : LONGJUT * 1.2
		local fine : STROKE * 0.4
		local final : 0.5 * [Math.min STROKE (radius * Math.PI * 2 / 10)]
		
		foreach j [range 0 5] : begin
			local s : Math.sin (j / 5 * Math.PI * 2)
			local c : Math.cos (j / 5 * Math.PI * 2)
			include : dispiro
				flat MIDDLE asteriskCenterY [widths fine fine]
				curl (MIDDLE + radius * s) (asteriskCenterY + radius * c) [widths final final]
		
	composite 'asterisk.centered' glyphs.'asterisk.top' [Upright] [Translate 0 (parenMid - asteriskCenterY)] [Italify]
	select-variant 'asterisk' '*' 'top' {
		.cv18 'asterisk.top'
		.cv19 'asterisk.centered'
	}
	
	create-glyph 'numbersign' : glyph-construction
		set-width WIDTH
		assign-unicode '#'
		
		local fine : adviceBlackness 3.5
		
		include : HBar SB RIGHTSB [mix parenTop parenBot (1 / 3)]
		include : HBar SB RIGHTSB [mix parenTop parenBot (2 / 3)]
		include : VBar [mix SB RIGHTSB 0.3] (parenBot + fine) (parenTop - fine) fine
		include : VBar [mix SB RIGHTSB 0.7] (parenBot + fine) (parenTop - fine) fine
	create-glyph 'slash' : glyph-construction
		set-width WIDTH
		assign-unicode '/'
		
		local cor : HVCONTRAST / [Math.sqrt (1 - [Math.pow ((RIGHTSB - SB - STROKE) / (parenTop - parenBot)) 2])]
		
		start-from SB parenBot
		line-to (SB + STROKE * cor) parenBot
		line-to RIGHTSB parenTop
		line-to (RIGHTSB - STROKE * cor) parenTop
		reverse-last
	
	create-glyph 'backslash' : glyph-construction
		set-width WIDTH
		assign-unicode "\\"
		
		local cor : HVCONTRAST / [Math.sqrt (1 - [Math.pow ((RIGHTSB - SB - STROKE) / (parenTop - parenBot)) 2])]
		
		start-from SB parenTop
		line-to (SB + STROKE * cor) parenTop
		line-to RIGHTSB parenBot
		line-to (RIGHTSB - STROKE * cor) parenBot
		reverse-last
	alias 'solidus' 0x2044 'slash'


symbol-block 'Dashes'
	create-glyph 'underscore' : glyph-construction
		set-width WIDTH
		assign-unicode '_'
		
		include : HBarBottom SB RIGHTSB 0
	
	create-glyph 'overline' : glyph-construction
		assign-unicode 0x203E
		include : HBarTop SB RIGHTSB CAP

	create-glyph 'hyphen' : glyph-construction
		set-width WIDTH
		assign-unicode '-'
		
		include : HBar SB RIGHTSB parenMid
	create-glyph 'softhyphen' : glyph-construction
		assign-unicode 0xAD
		include glyphs.hyphen AS_BASE
	alias 'gpHyphen' 0x2010 'hyphen'
	alias 'nbHyphen' 0x2011 'hyphen'
	alias 'figureDash' 0x2012 'hyphen'
	alias 'enDash' 0x2013 'hyphen'
	
	create-glyph 'emDash' : glyph-construction
		assign-unicode 0x2014
		set-width FULLWIDTH
		include : HBar 0 FULLWIDTH parenMid
	
	create-glyph 'doubleEmDash' : glyph-construction
		set-width (FULLWIDTH * 2)
		include : HBar 0 (FULLWIDTH * 2) parenMid
	
	alias 'horizontalBar' 0x2015 'emDash'


symbol-block 'Interpuncts'
	create-glyph 'interpunct' : glyph-construction
		assign-unicode 0xB7
		set-width FULLWIDTH
		include : Ring (parenMid + PERIODRADIUS - O) (parenMid - PERIODRADIUS + O) (FWMIDDLE - PERIODRADIUS + O) (FWMIDDLE + PERIODRADIUS - O) true
	alias 'bullet' 0x2022 'interpunct'
	alias 'hyphenpoint' 0x2027 'interpunct'
	alias 'greekbullet' 0x387 'interpunct'

# quotation marks
symbol-block 'Quotes and Primes'
	local quoteTop (CAP * 1.05)
	local quoteBottom (XH * 0.85)
	create-glyph 'singleQuote' : glyph-construction
		set-width WIDTH
		assign-unicode 0x27
		
		include : dispiro
			widths.center (STROKE * 1.1)
			g4.down.start MIDDLE quoteTop [heading DOWNWARD]
			g4 MIDDLE quoteBottom [widths.heading (HALFSTROKE * 0.95) (HALFSTROKE * 0.95) DOWNWARD]
	
	create-glyph 'doubleQuote' : glyph-construction
		set-width WIDTH
		assign-unicode 0x22
		
		local dist : 0.2 * WIDTH
		include glyphs.singleQuote
		apply-transform : Translate (-dist * 2) 0
		include glyphs.singleQuote
		apply-transform : Translate dist 0

	local yCurlyQuotes [mix quoteBottom quoteTop 0.5]
	local commaLow (DESCENDER * 0.9)
	local ratio : Math.min 1 : (quoteTop - quoteBottom) / (PERIODSIZE - commaLow)
	create-glyph 'lowSingleQuote' : glyph-construction
		include glyphs.comma
		include : FlipAround MIDDLE 0 ratio ratio
	
	create-glyph 'openSingleQuote' : glyph-construction
		include glyphs.lowSingleQuote
		include : FlipAround MIDDLE [mix [mix PERIODSIZE commaLow 0.5] yCurlyQuotes 0.5]
	
	create-glyph 'closeSingleQuote' : glyph-construction
		include glyphs.openSingleQuote
		include : FlipAround MIDDLE yCurlyQuotes
	
	create-glyph 'revertSingleQuote' : glyph-construction
		include glyphs.invertComma
		include : FlipAround MIDDLE 0 ratio ratio
		include : FlipAround MIDDLE [mix [mix PERIODSIZE commaLow 0.5] yCurlyQuotes 0.5]
		include : FlipAround MIDDLE yCurlyQuotes
	
	create-glyph 'lowDoubleQuote' : glyph-construction
		local dist : WIDTH * 0.225
		include glyphs.lowSingleQuote
		apply-transform : Translate (-dist * 2) 0
		include glyphs.lowSingleQuote
		apply-transform : Translate dist 0
	
	create-glyph 'openDoubleQuote' : glyph-construction
		include glyphs.lowDoubleQuote
		include : FlipAround MIDDLE [mix [mix PERIODSIZE commaLow 0.5] yCurlyQuotes 0.5]
	
	create-glyph 'closeDoubleQuote' : glyph-construction
		include glyphs.openDoubleQuote
		include : FlipAround MIDDLE yCurlyQuotes
	
	create-glyph 'revertDoubleQuote' : glyph-construction
		local dist : WIDTH * 0.225
		include glyphs.revertSingleQuote
		apply-transform : Translate (-dist * 2) 0
		include glyphs.revertSingleQuote
		apply-transform : Translate dist 0
	
	fwr nothing 0x201A 'lowSingleQuote'
	fwr nothing 0x2018 'openSingleQuote'
	fwl nothing 0x2019 'closeSingleQuote'
	fwr nothing 0x201B 'revertSingleQuote'
	fwr nothing 0x201E 'lowDoubleQuote'
	fwr nothing 0x201C 'openDoubleQuote'
	fwl nothing 0x201D 'closeDoubleQuote'
	fwr nothing 0x201F 'revertDoubleQuote'
	
	create-glyph 'prime' : glyph-construction
		assign-unicode 0x2032
		local wide : WIDTH * 0.1
		include : dispiro
			widths.center (STROKE * 1.2)
			flat (MIDDLE + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE - wide) quoteBottom [widths.heading HALFSTROKE HALFSTROKE DOWNWARD]
	
	create-glyph 'doubleprime' : glyph-construction
		assign-unicode 0x2033
		local d : 0.25 * (RIGHTSB - SB)
		include glyphs.prime
		apply-transform : Translate (-d * 2) 0
		include glyphs.prime
		apply-transform : Translate d 0
	
	create-glyph 'tripleprime' : glyph-construction
		assign-unicode 0x2034
		local wide : WIDTH * 0.1
		local d : WIDTH * 0.3
		local fine : 0.5 * [adviceBlackness 3.5]
		include : dispiro
			widths.center (fine * 2 * 1.2)
			flat (MIDDLE + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE - wide) quoteBottom [widths.heading fine fine DOWNWARD]
		include : dispiro
			widths.center (fine * 2 * 1.2)
			flat (MIDDLE - d + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE - d - wide) quoteBottom [widths.heading fine fine DOWNWARD]
		include : dispiro
			widths.center (fine * 2 * 1.2)
			flat (MIDDLE + d + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE + d - wide) quoteBottom [widths.heading fine fine DOWNWARD]
	
	create-glyph 'revprime' : glyph-construction
		assign-unicode 0x2035
		local wide : -WIDTH * 0.1
		include : dispiro
			widths.center (STROKE * 1.2)
			flat (MIDDLE + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE - wide) quoteBottom [widths.heading HALFSTROKE HALFSTROKE DOWNWARD]
	
	create-glyph 'revdoubleprime' : glyph-construction
		assign-unicode 0x2036
		local d : 0.25 * (RIGHTSB - SB)
		include glyphs.revprime
		apply-transform : Translate (-d * 2) 0
		include glyphs.revprime
		apply-transform : Translate d 0
	
	create-glyph 'revtripleprime' : glyph-construction
		assign-unicode 0x2037
		local wide : -WIDTH * 0.1
		local d : WIDTH * 0.3
		local fine : 0.5 * [adviceBlackness 3.5]
		include : dispiro
			widths.center (fine * 2 * 1.2)
			flat (MIDDLE + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE - wide) quoteBottom [widths.heading fine fine DOWNWARD]
		include : dispiro
			widths.center (fine * 2 * 1.2)
			flat (MIDDLE - d + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE - d - wide) quoteBottom [widths.heading fine fine DOWNWARD]
		include : dispiro
			widths.center (fine * 2 * 1.2)
			flat (MIDDLE + d + wide) quoteTop [heading DOWNWARD]
			curl (MIDDLE + d - wide) quoteBottom [widths.heading fine fine DOWNWARD]

	create-glyph 'singleGuillemetLeft' : glyph-construction
		set-width WIDTH
		assign-unicode 0x2039
		
		local top : mix parenMid parenTop 0.5
		local bot : mix parenMid parenBot 0.5
		local extension 0.55
		local cor 1
		
		local sw : adviceBlackness 3.5
		
		include : dispiro
			widths.center sw
			g4 [mix MIDDLE RIGHTSB extension] top
			quadcontrols 0.4 0.75
			g4 [mix MIDDLE SB extension] [mix top bot 0.5] [widths.center.heading (cor * sw) LEFTWARD]
		
		include : dispiro
			widths.center (sw * cor)
			g4 [mix MIDDLE SB extension] [mix top bot 0.5] [heading RIGHTWARD]
			quadcontrols (1 - 0.4) (1 - 0.75)
			g4 [mix MIDDLE RIGHTSB extension] bot [widths.center sw]
		
		apply-transform : Translate (-(RIGHTSB - SB) * 0.05) 0
	
	create-glyph 'guillemetLeft' : glyph-construction
		set-width WIDTH
		assign-unicode 0xAB
		
		include glyphs.singleGuillemetLeft
		apply-transform : Translate ((RIGHTSB - SB) * 0.5) 0
		include glyphs.singleGuillemetLeft
		apply-transform : Translate (-(RIGHTSB - SB) * 0.25) 0
	
	
	create-glyph 'singleGuillemetRight' : glyph-construction
		set-width WIDTH
		assign-unicode 0x203A
		
		include glyphs.singleGuillemetLeft
		include : FlipAround MIDDLE parenMid
	
	create-glyph 'guillemetRight' : glyph-construction
		set-width WIDTH
		assign-unicode 0xBB
		
		include glyphs.guillemetLeft
		include : FlipAround MIDDLE parenMid

# Daggers
symbol-block 'Daggers'
	create-glyph 'dagger' : glyph-construction
		assign-unicode 0x2020
		include : HBar SB RIGHTSB [mix parenTop parenBot 0.33]
		include : VBar MIDDLE parenBot parenTop
	
	create-glyph 'doubledagger' : glyph-construction
		assign-unicode 0x2021
		include glyphs.dagger
		include : HBar SB RIGHTSB [mix parenTop parenBot 0.67]

# Ellipsis
symbol-block 'Ellipsis'
	create-glyph 'onedotLeader' : glyph-construction
		set-width FULLWIDTH
		assign-unicode 0x2024
		local radius : linreg WIDTH (0.5 * [adviceBlackness 3.25] * PERIODSIZE / DOTSIZE) UPM PERIODRADIUS FULLWIDTH
		include : Ring (radius * 2 - O) O (FULLWIDTH / 2 - radius + O) (FULLWIDTH / 2 + radius - O) true
	
	create-glyph 'twodotsLEader' : glyph-construction
		set-width FULLWIDTH
		assign-unicode 0x2025
		local radius : linreg WIDTH (0.5 * [adviceBlackness 3.25] * PERIODSIZE / DOTSIZE) UPM PERIODRADIUS FULLWIDTH
		local left : mix 0 FULLWIDTH (1 / 4)
		local right : mix 0 FULLWIDTH (3 / 4)
		include : Ring (radius * 2 - O) O (left - radius + O) (left + radius - O) true
		include : Ring (radius * 2 - O) O (right - radius + O) (right + radius - O) true
	
	create-glyph 'ellipsis' : glyph-construction
		set-width FULLWIDTH
		assign-unicode 0x2026
		local radius : linreg WIDTH (0.5 * [adviceBlackness 3.25] * PERIODSIZE / DOTSIZE) UPM PERIODRADIUS FULLWIDTH
		local left : mix 0 FULLWIDTH (1 / 6)
		local right : mix 0 FULLWIDTH (5 / 6)
		include : Ring (radius * 2 - O) O (left - radius + O) (left + radius - O) true
		include : Ring (radius * 2 - O) O (FULLWIDTH / 2 - radius + O) (FULLWIDTH / 2 + radius - O) true
		include : Ring (radius * 2 - O) O (right - radius + O) (right + radius - O) true

symbol-block 'Percentages'
	create-glyph 'percent' : glyph-construction
		set-width WIDTH
		assign-unicode '%'
		local dotwidth ([adviceBlackness 4] * 1.5)
		local cor : HVCONTRAST / [Math.sqrt (1 - [Math.pow ((RIGHTSB - SB - STROKE) / (CAP - 0)) 2])]
		
		start-from SB 0
		line-to (SB + STROKE * cor) 0
		line-to RIGHTSB CAP
		line-to (RIGHTSB - STROKE * cor) CAP
	
		include : VBarLeft SB [mix CAP 0 0.3] CAP dotwidth
		include : VBarRight RIGHTSB 0 [mix 0 CAP 0.3] dotwidth
	create-glyph 'permille' : glyph-construction
		assign-unicode 0x2030
		local dotwidth ([adviceBlackness 4] * 1.5)
		
		include : dispiro
			widths.center
			flat SB (CAP * 0.2)
			curl [mix SB RIGHTSB 0.85] (CAP * 0.9)
	
		include : VBarLeft [mix SB RIGHTSB 0.075] [mix CAP 0 0.3] CAP dotwidth
		include : VBarRight RIGHTSB 0 [mix 0 CAP 0.3] dotwidth
		include : VBarRight (RIGHTSB - [Math.max (WIDTH * 0.25) (dotwidth * 1.5)]) 0 [mix 0 CAP 0.3] dotwidth
	
	create-glyph 'basepoint' : glyph-construction
		assign-unicode 0x2031
		local dotwidth ([adviceBlackness 4] * 1.5)
		local dotfine [adviceBlackness 3.5]
		
		include : dispiro
			widths.center
			flat SB (CAP * 0.2)
			curl [mix SB RIGHTSB 0.85] (CAP * 0.9)
	
		include : VBarLeft SB [mix CAP 0 0.3] CAP dotwidth
		include : VBarRight RIGHTSB 0 [mix 0 CAP 0.3] dotfine
		include : VBar [mix [mix SB RIGHTSB 0.1] RIGHTSB 0.5] 0 [mix 0 CAP 0.3] dotfine
		include : VBarLeft [mix SB RIGHTSB 0.1] 0 [mix 0 CAP 0.3] dotfine

symbol-block "ASCII Marks"
	local MarkZoom : glyph-construction
		apply-transform : Upright
		apply-transform : Translate (-MIDDLE) (-XH - ACCENT)
		apply-transform : Scale ((RIGHTSB - SB) / (markExtend * 3))
		apply-transform : Translate (MIDDLE) (XH + ACCENT)
		apply-transform : Italify 
	
	composite 'asciitilde.top' glyphs.space glyphs.tildeAbove MarkZoom
	composite 'asciitilde.centered' glyphs.'asciitilde.top' [Upright] [Translate 0 (parenMid - XH - ACCENT)] [Italify]
	select-variant 'asciitilde' '~' 'top'  {
		.cv16 'asciitilde'
		.cv17 'asciitilde.centered'
	}
	
	composite 'asciigrave' glyphs.space glyphs.graveAbove MarkZoom [into-unicode '`']
	composite 'asciicaret' glyphs.space glyphs.circumflexAbove MarkZoom [into-unicode '^']
	composite 'latin1acute' glyphs.space glyphs.acuteAbove MarkZoom [into-unicode 0xB4]
	composite 'degree' glyphs.space glyphs.ringAbove MarkZoom [into-unicode 0xB0]

### Aliased modifer letters
alias 'mdfPrime' 0x2B9 'prime'
alias 'mdfDoublePrime' 0x2BA 'doubleprime'
alias 'mdfTurncomma' 0x2BB 'openSingleQuote'
alias 'mdfApostrophe' 0x2BC 'closeSingleQuote'
alias 'mdfRevComma' 0x2BD 'revertSingleQuote'
alias 'mdfStress' 0x2C8 'singleQuote'
turned 'mdfSecondaryStress' 0x2CC 'singleQuote' MIDDLE (XH / 2)


symbol-block 'Double-width punctuations'
	dwc nothing 0xFF01 'exclam'
	dwc nothing 0xFF1A 'colon'
	dwc nothing 0xFF1B 'semicolon'
	dwl nothing 0xFF0C 'comma'
	dwl nothing 0xFF0E 'period'
	dwr nothing 0xFF08 'parenLeft'
	dwl nothing 0xFF09 'parenRight'